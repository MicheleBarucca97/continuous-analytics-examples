{
 "meta": {
  "version": "1",
  "type": "task",
  "name": "FireAlarm-Template",
  "description": "template created from task: FireAlarm"
 },
 "content": {
  "data": {
   "type": "task",
   "attributes": {
    "status": "active",
    "name": "FireAlarm",
    "flux": "option v = {\n  timeRangeStart: -5m,\n  timeRangeStop: now()\n}\n\noption task = { \n  name: \"FireAlarm\",\n  every: 1m,\n}\n\ntemp = from(bucket: \"training\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"TemperatureSensorEvent\")\n  |> filter(fn: (r) => r._field == \"temperature\")\n  |> filter(fn: (r) => r.sensor == \"S1\")\n  |> aggregateWindow(every: 3s, fn: mean)\n\n\nsmoke = from(bucket: \"training\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"SmokeSensorEvent\")\n  |> filter(fn: (r) => r._field == \"smoke\")\n  |> filter(fn: (r) => r.sensor == \"S1\")\n  |> aggregateWindow(every: 3s, fn: last)\n\njoin(tables: {s: smoke, t: temp}, on: [\"_time\"], method: \"inner\")\n\t|> map(fn: (r) =>\n\t\t({r with _measurement: \"fireAlarm\"}))\n\t|> map(fn: (r) =>\n\t\t({r with _field: \"detected\"}))\n\t|> map(fn: (r) =>\n\t\t({r with _value: true}))\n\t|> rename(columns: {_value_s: \"smoke\", _value_t: \"temperature\"})\n\t|> keep(columns: [\"_time\", \"sensor\", \"_measurement\", \"smoke\", \"temperature\", \"_field\", \"_value\"])\n  |> to(bucket: \"training\", org: \"sda\")",
    "every": "1m"
   },
   "relationships": {
    "label": {
     "data": []
    }
   }
  },
  "included": []
 },
 "labels": []
}