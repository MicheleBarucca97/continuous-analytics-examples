{
 "meta": {
  "version": "1",
  "type": "task",
  "name": "Zscore of sensor observations-Template",
  "description": "template created from task: Zscore of sensor observations"
 },
 "content": {
  "data": {
   "type": "task",
   "attributes": {
    "status": "active",
    "name": "Zscore of sensor observations",
    "flux": "import \"date\"\nimport \"math\"\n\noption v = {bucket: \"\", timeRangeStart: -5m, timeRangeStop: now()}\noption task = {name: \"Zscore of sensor observations\", every: 5s}\n\nmovingAvg = from(bucket: \"training\")\n\t|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n\t|> filter(fn: (r) =>\n\t\t(r._measurement == \"TemperatureSensorEvent\"))\n\t|> filter(fn: (r) =>\n\t\t(r._field == \"temperature\"))\n\t|> filter(fn: (r) =>\n\t\t(r.sensor == \"S1\"))\n\t|> aggregateWindow(every: 5m, fn: mean, createEmpty: false)\n\t|> filter(fn: (r) =>\n\t\t(r._stop != r._time))\n\t|> drop(columns: [\"_start\", \"_stop\", \"host\"])\nmovingStddev = from(bucket: \"training\")\n\t|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n\t|> filter(fn: (r) =>\n\t\t(r._measurement == \"TemperatureSensorEvent\"))\n\t|> filter(fn: (r) =>\n\t\t(r._field == \"temperature\"))\n\t|> filter(fn: (r) =>\n\t\t(r.sensor == \"S1\"))\n\t|> aggregateWindow(every: 5m, fn: stddev, createEmpty: false)\n\t|> filter(fn: (r) =>\n\t\t(r._stop != r._time))\n\t|> drop(columns: [\"_start\", \"_stop\", \"host\"])\njoin1 = join(tables: {avg: movingAvg, stddev: movingStddev}, on: [\"_time\"], method: \"inner\")\n\t|> rename(columns: {_field_avg: \"_field\"})\n\t|> rename(columns: {_measurement_avg: \"_measurement\"})\n\t|> rename(columns: {sensor_avg: \"sensor\"})\nallData = from(bucket: \"training\")\n\t|> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n\t|> filter(fn: (r) =>\n\t\t(r._measurement == \"TemperatureSensorEvent\"))\n\t|> filter(fn: (r) =>\n\t\t(r._field == \"temperature\"))\n\t|> filter(fn: (r) =>\n\t\t(r.sensor == \"S1\"))\n\t|> drop(columns: [\"_start\", \"_stop\", \"host\"])\njoin2 = join(tables: {all: allData, j: join1}, on: [\"_field\", \"_measurement\", \"sensor\"])\n\t|> filter(fn: (r) =>\n\t\t(uint(v: r._time_all) - uint(v: r._time_j) > 0))\n\t|> filter(fn: (r) =>\n\t\t(uint(v: r._time_all) - uint(v: r._time_j) <= 5 * 60 * 1000000000))\n\t|> rename(columns: {_time_all: \"_time\"})\n\t|> map(fn: (r) =>\n\t\t({r with _value: math.abs(x: (r._value - r._value_avg) / r._value_stddev)}))\n\t|> map(fn: (r) =>\n\t\t({r with _field: \"zScore\"}))\n\t|> map(fn: (r) =>\n\t\t({r with _measurement: \"TemperatureSensorEventZscore\"}))\n\njoin2\n\t|> to(bucket: \"training\", org: \"sda\")",
    "every": "5s"
   },
   "relationships": {
    "label": {
     "data": []
    }
   }
  },
  "included": []
 },
 "labels": []
}